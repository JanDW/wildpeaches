// ---
// eleventyExcludeFromCollections: true
// permalink: /service-worker.js
// ---

const version = 'v0.0.1';

const staticCacheName = `${version}-staticfiles`;
const imageCacheName = 'images';
const pagesCacheName = 'pages';
const maxPages = 20; // maximum number of pages to cache
const maxImages = 50; // maximum number of images to cache

const cacheList = [staticCacheName, imageCacheName, pagesCacheName];

function updateStaticCache() {
  // eslint-disable-next-line no-undef
  return caches.open(staticCacheName).then((staticCache) => {
    staticCache.addAll(['{{ site.icon.url }}']);
    return staticCache.addAll([
      // @todo add fonts
      '/assets/styles/style.min.css',
      '/confirmed.html',
      'offline.html',
      '/assets/vectors/no-image.svg',
    ]);
  });
}

function clearOldCaches() {
  return caches.keys().then((cacheNames) => {
    Promise.all(
      cacheNames
        .filter((cacheName) => !cacheList.includes(cacheName))
        .map((cacheName) => caches.delete(cacheName))
    );
  });
}

function trimCaches(cacheName, maxItems) {
  cacheName.open( cache => {
    cache.keys().then( (items) => {
      if items.length > maxItems {
        cache.delete(items[0])
        .then(
          trimCache(cacheName, maxItems)
        )
      }
    })
  })
}

addEventListener('install', (installEvent) => {
  installEvent.waitUntil(updateStaticCache()).then(skipWaiting());
});

addEventListener('fetch', (fetchEvent) => {
  const request = fetchEvent.request;

  // is HTML?
  if (request.headers.get('Accept').includes('text/html')) {
    if (request.url.includes('/blog/')) {
      fetchEvent.respondWith(
        caches.match(request).then((responseFromCache) => {
          if (responseFromCache) {
            fetchEvent.waitUntil(
              fetch(request).then((responseFromFetch) => {
                caches.open(pagesCacheName).then((pagesCache) => {
                  return pagesCache.put(request, responseFromFetch);
                });
              })
            );
            console.info('Returned from cache');
            return responseFromCache;
          }

          return fetch(request).then((responseFromFetch) => {
            const copy = responseFromFetch.clone();
            fetchEvent.waitUntil(
              caches.open(pagesCacheName).then((pagesCache) => {
                return pagesCache.put(request, copy);
              })
            );
            return responseFromFetch;
          });
        })
      );
    }
    fetchEvent.respondWith(
      fetch(request)
        .then((responseFromFetch) => {
          const clone = responseFromFetch.clone();
          fetchEvent.waitUntil(
            caches.open(pagesCacheName).then((pagesCache) => {
              return pagesCache.put(request, clone);
            })
          );
          return responseFromFetch;
        })
        .catch((error) => {
          return caches.match(request).then((responseFromCache) => {
            return responseFromCache || caches.match('/offline.html');
          });
        })
    );
    return;
  }

  // is image?
  if (request.headers.get('Accept').includes('image')) {
    fetchEvent.respondWith(
      // Image cached?
      caches.match(request).then((responseFromCache) => {
        if (responseFromCache) {
          fetchEvent.waitUntil(
            fetch(request).then((responseFromFetch) => {
              caches.open(imageCacheName).then((imageCache) => {
                return imageCache.put(request, responseFromFetch);
              });
            })
          );
          return responseFromCache;
        }
        // No, fetch image
        return fetch(request)
          .then((responseFromFetch) => {
            const clone = responseFromFetch.clone();

            // Put clone in cache
            fetchEvent.waitUntil(
              caches.open(imageCacheName).then((imageCache) => {
                imageCache.put(request, clone);
              })
            );
            return responseFromFetch;
          })
          .catch((error) => {
            console.log(error);
            return caches.match('/assets/vectors/no-image.svg');
          });
      })
    );
    return;
  }

  // Everything else
  fetchEvent.respondWith(
    caches
      .match(request)
      .then((responseFromCache) => {
        return responseFromCache || fetch(request);
      })
      .catch((error) => {
        return caches.match('/offline.html');
      })
  );
});

self.addEventListener('activate', (activateEvent) => {
  activateEvent.waitUntil();
});
